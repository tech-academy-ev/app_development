{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"App Development with Flutter Introduction Welcome! We are happy to introduce you to the newest offering of our semester program: the App Development Track! Guiding you through your project will be Steffen Kn\u00f6dler. Steffen graduated with a Bachelor's degree in Economics & Business Administration from Goethe University. He holds a Master\u2019s degree in IT and Digital innovation and has been working as a Full-Stack Flutter developer for more than 2 years. In this track you will be introduced to the platform framework Flutter. Why Flutter? In the last year, Flutter has overtaken other tools and become the most popular toolkit for cross-platform mobile development. By February 2022, nearly 500,000 Flutter apps have already been published to the Google Play Store. Many large companies such as BMW, Alibaba, Philips and Google also develop apps based on Flutter and its community is growing. Like no other framework, Flutter offers the possibility to develop with one codebase (Dart). Although the framework can be compiled for other platforms, such as web, macOS and Windows, this course will focus primarily on mobile app development, as it is very mature in mobile app development on Android and iOS. Overall you will gain insight into the work of an app developer. Not only will you learn how to use Flutter but you will also make use of Android Studio, which is the official development environment for Google's open-source mobile operating system and was specifically created to give non-experts the opportunity to develop their own apps for the mobile operating system. Additionally you will get to know Android Emulators which make it possible to use the Android operating system on another operating system, for example Windows. We are excited to see you make your very first app development steps and help you enable you to find the right resources to learn! Objectives You will learn the basics of app development with Flutter and will be able to develop your own apps for iOS and Android. By the end of this course, you will be able to create a Flutter app with a variety of pages, enable navigation between pages, and customize widgets to meet requirements.","title":"Home"},{"location":"#app-development-with-flutter","text":"","title":"App Development with Flutter"},{"location":"#introduction","text":"Welcome! We are happy to introduce you to the newest offering of our semester program: the App Development Track! Guiding you through your project will be Steffen Kn\u00f6dler. Steffen graduated with a Bachelor's degree in Economics & Business Administration from Goethe University. He holds a Master\u2019s degree in IT and Digital innovation and has been working as a Full-Stack Flutter developer for more than 2 years. In this track you will be introduced to the platform framework Flutter. Why Flutter? In the last year, Flutter has overtaken other tools and become the most popular toolkit for cross-platform mobile development. By February 2022, nearly 500,000 Flutter apps have already been published to the Google Play Store. Many large companies such as BMW, Alibaba, Philips and Google also develop apps based on Flutter and its community is growing. Like no other framework, Flutter offers the possibility to develop with one codebase (Dart). Although the framework can be compiled for other platforms, such as web, macOS and Windows, this course will focus primarily on mobile app development, as it is very mature in mobile app development on Android and iOS. Overall you will gain insight into the work of an app developer. Not only will you learn how to use Flutter but you will also make use of Android Studio, which is the official development environment for Google's open-source mobile operating system and was specifically created to give non-experts the opportunity to develop their own apps for the mobile operating system. Additionally you will get to know Android Emulators which make it possible to use the Android operating system on another operating system, for example Windows. We are excited to see you make your very first app development steps and help you enable you to find the right resources to learn!","title":"Introduction"},{"location":"#objectives","text":"You will learn the basics of app development with Flutter and will be able to develop your own apps for iOS and Android. By the end of this course, you will be able to create a Flutter app with a variety of pages, enable navigation between pages, and customize widgets to meet requirements.","title":"Objectives"},{"location":"additional_resources/","text":"Additional Resources Flutter Samples Samples and other projects may help you understand the syntax of flutter. Find a collection of samples under the following URL: https://flutter.github.io/samples/# Flutter Widget Introduction The more you work with Flutter, the easier development will become. Find an introduction to the most common widgets under the following link: https://docs.flutter.dev/development/ui/widgets-intro","title":"Additional Resources"},{"location":"additional_resources/#additional-resources","text":"","title":"Additional Resources"},{"location":"additional_resources/#flutter-samples","text":"Samples and other projects may help you understand the syntax of flutter. Find a collection of samples under the following URL: https://flutter.github.io/samples/#","title":"Flutter Samples"},{"location":"additional_resources/#flutter-widget-introduction","text":"The more you work with Flutter, the easier development will become. Find an introduction to the most common widgets under the following link: https://docs.flutter.dev/development/ui/widgets-intro","title":"Flutter Widget Introduction"},{"location":"course/","text":"Udemy Course Flutter & Dart - The Complete Guide [2022 Edition] A Complete Guide to the Flutter SDK & Flutter Framework for building native iOS and Android apps As part of the app development track, we recommend that all participants complete the first 4 sections of the Flutter udemy course. The course provides setup instructions for macOS and Windows and explains the fundamentals of flutter development. To be able to fulfill the project requirements, it is highly recommended to complete the suggested course sections. Overview: Introduction 15 Lektionen, insgesamt 1 Std. 57 Min Material Flutter Basics [Quiz App] 41 Lektionen, insgesamt 4 Std. 53 Min Material Running Apps on Different Devices & Debugging Apps 11 Lektionen, insgesamt 38 Min Material Widgets, Styling, Adding Logic - Building a Real App [PERSONAL EXPENSES APP] 48 Lektionen- 5 Std. 3 Min Material","title":"Course"},{"location":"course/#udemy-course","text":"","title":"Udemy Course"},{"location":"course/#flutter-dart-the-complete-guide-2022-edition","text":"A Complete Guide to the Flutter SDK & Flutter Framework for building native iOS and Android apps As part of the app development track, we recommend that all participants complete the first 4 sections of the Flutter udemy course. The course provides setup instructions for macOS and Windows and explains the fundamentals of flutter development. To be able to fulfill the project requirements, it is highly recommended to complete the suggested course sections.","title":"Flutter &amp; Dart - The Complete Guide [2022 Edition]"},{"location":"course/#overview","text":"Introduction 15 Lektionen, insgesamt 1 Std. 57 Min Material Flutter Basics [Quiz App] 41 Lektionen, insgesamt 4 Std. 53 Min Material Running Apps on Different Devices & Debugging Apps 11 Lektionen, insgesamt 38 Min Material Widgets, Styling, Adding Logic - Building a Real App [PERSONAL EXPENSES APP] 48 Lektionen- 5 Std. 3 Min Material","title":"Overview:"},{"location":"curriculum/","text":"Curriculum The app track includes six dates in which participants are introduced to app development with Flutter and have the chance to support each other in app development. The following bullet points are intended to give an overview of the course and provide more information about the app development track. 4.1 Kick-Off Workshop (23.11.2022) Introduction of Udemy course (see below) Get to know other participants Sprint 0 Work on Udemy Course (Section 1-3) As explained in secion 1 of the udemy course, install and setup flutter: Install Flutter and its dependencies https://docs.flutter.dev/get-started/install/windows / https://docs.flutter.dev/get-started/install/macos Open your terminal -> enter flutter doctor and verify no issues need to be resolved Install VS Code and the extensions \"flutter\" and \"dart\" 4.2 Flutter Coding Introduction (09.11.2022) Participants are expected to have completed Udemy Course Section 1-3 until today Explanation of Flutter & Dart basics. Difference Stateless and Stateful Widget initState and setState method Introduction to most important widgets Sprint 1 Work on Udemy Course (Section 4) 4.3 Coding MeetUp 1 (23.11.2022) Participants are expected to have completed Udemy Course Section 4 until today Brief Introduction to git Introduction to \u201cSharedPreferences\u201d (Local Storage) Presentation of the project (see below) Sprint 2 Setting up the project: Use `flutter create open lib/main.dart Delete the entire Stateful \"MyHomePage\" Widget Create a new file: \"home_page.dart\" Open \"home_page.dart\" and type \"st\" --> autocomplete-window will pop-up: choose: stateful widget and enter HomePage Let the HomePage Widget return a Scaffold widget instead of a container Add \"AppBar()\" within appBar: and choose a title Create 4 new files, each with an own stateless widget and individual name. (view note, add note, web view 1, web view 2) Add a bottom bar. Here you can find an example: https://api.flutter.dev/flutter/material/BottomNavigationBar-class.html Make sure that the click on each button within the bottomBar will display the widget from the 4 recently created files. In the widget of the the add-note page, add a Form() widget. Wihtin the Form widget add a Column with two text fields and a \u201csave\u201d TextButton. You can find an example here: Make sure you had created a Form() and added a FormKey https://docs.flutter.dev/cookbook/forms/validation 4.4 Coding MeetUp 2 (14.12.2022) Flutter Tips by Steffen Discussion about the project and you can ask for help If you have not completed the recommended tasks, do not hesitate to reach out for help. Sprint 3 Add a validator function to each text field. See https://docs.flutter.dev/cookbook/forms/validation . Make sure that the user can only save, when the text fields are not empty Use https://pub.dev/packages/shared_preferences to save the data locally. Work on the \u201cview-notes\u201d-page: make sure you create a Stateful widget and check whether you have saved data every time you open the page. To do that, make the check in the initState() method. create a nullable String variable String? savedNoteTitle; and String? savedNoteContent; If data is available, use the setState() function to update both variables. The following guideline may help: https://docs.flutter.dev/cookbook/persistence/key-value If the Strings are not null, display a note-widget with the retrieved data. You can do that by using a condition: savedNoteTitle != null ? Text(savedNoteTitle) : const SizedBox() . This means that you want to show a text widget if the variable is not null and an empty constant sizedbox if the variable is null. Do the same for the savedNoteContent variable. Make sure you have added both within the same column widget. Attention: It is fine if the user can only save one note. As soon as a new note is entered the previous note can be overwritten. You do not have to implement the logic of adding an unlimited number of notes. 4.5 Coding MeetUp 3 (11.01.2023) Discussion about the project and the participants will have the chance to ask for help If you have not completed the recommended tasks, do not hesitate to reach out for help. Sprint 4 Add both web-views (see https://codelabs.developers.google.com/codelabs/flutter-webview#3 ). Add the \u201cedit-profile\u201d feature and make sure you use Forms() and a StatefulWidget again. The concept is the same. 4.6 Coding MeetUp 4 (01.02.2023) Discussion about the project and the participants will have the chance to ask for help If you have not completed the recommended tasks, do not hesitate to reach out for help. Sprint 5 Working on last details and making sure all requirements are met. Deadline: Hand-In on 04.02.2023 (11.59PM)","title":"Curriculum"},{"location":"curriculum/#curriculum","text":"The app track includes six dates in which participants are introduced to app development with Flutter and have the chance to support each other in app development. The following bullet points are intended to give an overview of the course and provide more information about the app development track.","title":"Curriculum"},{"location":"curriculum/#41-kick-off-workshop-23112022","text":"Introduction of Udemy course (see below) Get to know other participants Sprint 0 Work on Udemy Course (Section 1-3) As explained in secion 1 of the udemy course, install and setup flutter: Install Flutter and its dependencies https://docs.flutter.dev/get-started/install/windows / https://docs.flutter.dev/get-started/install/macos Open your terminal -> enter flutter doctor and verify no issues need to be resolved Install VS Code and the extensions \"flutter\" and \"dart\"","title":"4.1 Kick-Off Workshop (23.11.2022)"},{"location":"curriculum/#42-flutter-coding-introduction-09112022","text":"Participants are expected to have completed Udemy Course Section 1-3 until today Explanation of Flutter & Dart basics. Difference Stateless and Stateful Widget initState and setState method Introduction to most important widgets Sprint 1 Work on Udemy Course (Section 4)","title":"4.2 Flutter Coding Introduction (09.11.2022)"},{"location":"curriculum/#43-coding-meetup-1-23112022","text":"Participants are expected to have completed Udemy Course Section 4 until today Brief Introduction to git Introduction to \u201cSharedPreferences\u201d (Local Storage) Presentation of the project (see below) Sprint 2 Setting up the project: Use `flutter create open lib/main.dart Delete the entire Stateful \"MyHomePage\" Widget Create a new file: \"home_page.dart\" Open \"home_page.dart\" and type \"st\" --> autocomplete-window will pop-up: choose: stateful widget and enter HomePage Let the HomePage Widget return a Scaffold widget instead of a container Add \"AppBar()\" within appBar: and choose a title Create 4 new files, each with an own stateless widget and individual name. (view note, add note, web view 1, web view 2) Add a bottom bar. Here you can find an example: https://api.flutter.dev/flutter/material/BottomNavigationBar-class.html Make sure that the click on each button within the bottomBar will display the widget from the 4 recently created files. In the widget of the the add-note page, add a Form() widget. Wihtin the Form widget add a Column with two text fields and a \u201csave\u201d TextButton. You can find an example here: Make sure you had created a Form() and added a FormKey https://docs.flutter.dev/cookbook/forms/validation","title":"4.3 Coding MeetUp 1 (23.11.2022)"},{"location":"curriculum/#44-coding-meetup-2-14122022","text":"Flutter Tips by Steffen Discussion about the project and you can ask for help If you have not completed the recommended tasks, do not hesitate to reach out for help. Sprint 3 Add a validator function to each text field. See https://docs.flutter.dev/cookbook/forms/validation . Make sure that the user can only save, when the text fields are not empty Use https://pub.dev/packages/shared_preferences to save the data locally. Work on the \u201cview-notes\u201d-page: make sure you create a Stateful widget and check whether you have saved data every time you open the page. To do that, make the check in the initState() method. create a nullable String variable String? savedNoteTitle; and String? savedNoteContent; If data is available, use the setState() function to update both variables. The following guideline may help: https://docs.flutter.dev/cookbook/persistence/key-value If the Strings are not null, display a note-widget with the retrieved data. You can do that by using a condition: savedNoteTitle != null ? Text(savedNoteTitle) : const SizedBox() . This means that you want to show a text widget if the variable is not null and an empty constant sizedbox if the variable is null. Do the same for the savedNoteContent variable. Make sure you have added both within the same column widget. Attention: It is fine if the user can only save one note. As soon as a new note is entered the previous note can be overwritten. You do not have to implement the logic of adding an unlimited number of notes.","title":"4.4 Coding MeetUp 2 (14.12.2022)"},{"location":"curriculum/#45-coding-meetup-3-11012023","text":"Discussion about the project and the participants will have the chance to ask for help If you have not completed the recommended tasks, do not hesitate to reach out for help. Sprint 4 Add both web-views (see https://codelabs.developers.google.com/codelabs/flutter-webview#3 ). Add the \u201cedit-profile\u201d feature and make sure you use Forms() and a StatefulWidget again. The concept is the same.","title":"4.5 Coding MeetUp 3 (11.01.2023)"},{"location":"curriculum/#46-coding-meetup-4-01022023","text":"Discussion about the project and the participants will have the chance to ask for help If you have not completed the recommended tasks, do not hesitate to reach out for help. Sprint 5 Working on last details and making sure all requirements are met.","title":"4.6 Coding MeetUp 4 (01.02.2023)"},{"location":"curriculum/#deadline-hand-in-on-04022023-1159pm","text":"","title":"Deadline: Hand-In on 04.02.2023 (11.59PM)"},{"location":"dart/","text":"Introduction to Dart The Dart language is present at the core of the Flutter framework and is used to code the Flutter applications. Dart is an open-source general-purpose programming language. It is originally developed by Google and later approved as a standard by ECMA (European Computer Manufacturers Association). Dart is one of the very few programming languages that supports both Just-In-Time (JIT) and Ahead-Of-Time (AOT) compiling, which makes it ideal for Flutter's development pruposes. Dart\u2019s Just-in-Time (JIT) Compilation loads the source code and converts it to the native machine code using the Dart\u2019s VM on the fly. JIT compilation enables important features, like, hot reload/restart/debugging feature that helps us to quickly and efficiently experiment with UIs and bug fixes without losing application state. This compilation process increases the speed and runtime of the application. The JIT compiler also speeds up the Flutter app development process. Ahead-of-Time (AOT) compilation comes into the picture when the flutter app is ready for production. When the app loads on the device the AOT compiles the flutter libraries to native ARM or X64 Machine code. The AOT Compiled app runs the app smoothly, provides better performance, minimum size, and removes dependencies needed for the development environment. Dart Syntax \u200b\u200bDart is an open-source, general-purpose, object-oriented programming language with C-style syntax developed by Google in 2011. The purpose of Dart programming is to create a frontend user interface for the web and mobile apps. It is inspired by other programming languages such as Java, JavaScript, C#, and is Strongly Typed. Since Dart is a compiled language so you cannot execute your code directly; instead, the compiler parses it and transfers it into machine code. If you know javascript, dart is very easy to learn. Dart supports most of the common concepts of programming languages like classes, interfaces, and functions. You do not need to know dart in detail to build a flutter app. Actually, you can even pick up dart while learning flutter and you do not have to learn dart before. However, knowledge of the programming language will help you develop apps. Hence, we prepared some examples that may teach you some important charactistics of the dart programming language. Remember that the following list only provides some features of the programming language, there are many many more features which we do not cover. Variables and Data Types 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 main () { // Variables var dog1 = \"Max\" ; // this is a variable (which can be assigned to values of different data types) bool isDog = true ; dynamic dog1 = \"Max\" ; // this is a variable (which can be assigned to values of different data types - and reassigned with values of different data types) String dog1 = \"Max\" ; // declare a string --> try to always declare the type of your variable int dogAge = 12 ; // integer double dogFoodPrice = 12.99 ; // double // Assigning new values to variables // if you want to assign a new variable, drop the data type and use the same name: var dog1 = \"Max\" ; dog1 = 23 ; // \u274c this is not allowed (once the variable was assigned to a string value, it must remain a string variable) dynamic dog1 = \"Max\" ; dog1 = 23 ; // \u2705 this is allowed as the data type is \"dynamic\" } 1 2 3 4 5 6 7 8 9 main () { // Lists List < String > foodList = [ \"cake\" , \"pizza\" ]; // this is List which can only contain strings List < String ?> foodList = [ \"cake\" , \"pizza\" , null ]; // this is List which can only contain strings and nulls List < int > quanityList = [ 4 , 5 , 4 ]; // this is List which can only contain integers List < double > priceList = [ 4.32 , 5.29 , 4.22 ]; // this is List which can only contain doubles List someList = [ \"cake\" , 3 , 4.32 ] // is the same as List<dynamic> } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 main () { // final and constant variables // 1.) CONSTANT // Value must be known at compile-time. Can't be changed after initialized. const femaleDogs = [ \"Luna\" , \"Bella\" ]; // compile time constant femaleDogs . add ( \"Winona\" ); // \u274c this is not allowed (you cannot change the variable) femaleDogs = [ \"Winona\" ]; // \u274c this is not allowed (you cannot re-assign the variable) // 2.) FINAL // Value must be known at run-time, final birthday = getBirthDateFromDB (); or final maleDogs = [ \"Milo\" ]; // mutable single-assignment variable maleDogs . add ( \"Cooper\" ); // \u2705 this is allowed (you can add an element to the list) maleDogs = [ \"Cooper\" ]; // \u274c this is not allowed (you cannot reassign the variable) } Maps (/jsons) 1 2 3 4 5 6 void main () { Map < String , String > foo = Map (); // you can also only write Map foo = {}; foo [ 'First' ] = 'test1' ; foo [ 'Second' ] = 'test2' ; print ( foo ); // = {\"First\": \"test1\", \"Second\": \"test2\"} } Null and Conditions In Dart, undefined values are null. Expressions in conditionals may only be boolean. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 main () { const int foo1 = 5 ; const int foo2 = 10 ; if ( foo1 > foo2 ) { return 'foo' ; } else { return null ; } // is the same as: (The following expression is often used in Flutter) foo1 > foo2 ? 'foo' : null ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 main () { const bool hasCollar = false ; const String ? toys = null ; const double amountOfMeals = 0 / 0 , // NaN - Not a Number (undefined) const String owner = \"\" , // empty string const int age = 0 , // integer final String ? name ; // nullable String if ( ! hasCollar ) print ( 'bark' ); // bark (means: if not false \u2192 if true) // same as: if ( hasCollar == false ) print ( 'bark' ); if ( ! hasCollar ) { print ( 'bark' );} // bark if ( toys == null ) print ( 'bark' ); // bark (checks if toys is null) if ( amountOfMeals . isNaN ) print ( 'bark' ); // bark if ( owner . isEmpty ) print ( 'bark' ); // bark (the string is empty) if ( age == 0 ) print ( 'bark' ); // bark (checks if age is zero) if ( name == null ) print ( 'bark' ); // bark (checks if breed is null) } Collection literals An Array in Javascript is a List in Dart. An Object in Javascript is a Map in Dart. 1 2 3 4 5 6 7 8 9 10 11 12 main () { var dogList = [ \"Lucy\" , \"Cooper\" , \"Zeus\" ]; var dogMap = { 'first' : \"Lucy\" , 'second' : \"Cooper\" }; // could use #first symbol instead var dogSet = { \"Lucy\" , \"Cooper\" , \"Zeus\" }; print ( dogList . length ); // 3 print ( dogMap . length ); // 2 print ( dogSet . length ); // 3 } Object-oriented Classes An Array in Javascript is a List in Dart. An Object in Javascript is a Map in Dart. 1 2 3 4 5 6 7 8 9 10 11 12 13 class Dog { // Class \u201cDog\u201d final String name ; // variable name of type String final int phone ; // variable phone of type integer Dog ( this . name , { this . phone }); // example of unnamed and named parameter tag () => \" ${ name } \\n If you found me please call ${ phone } !\" ; } main () { print ( Dog ( 'Luna' , phone: 6198887421 ). tag ()); // Luna // If you found me please call 6198887421! }","title":"Introduction to Dart"},{"location":"dart/#introduction-to-dart","text":"The Dart language is present at the core of the Flutter framework and is used to code the Flutter applications. Dart is an open-source general-purpose programming language. It is originally developed by Google and later approved as a standard by ECMA (European Computer Manufacturers Association). Dart is one of the very few programming languages that supports both Just-In-Time (JIT) and Ahead-Of-Time (AOT) compiling, which makes it ideal for Flutter's development pruposes. Dart\u2019s Just-in-Time (JIT) Compilation loads the source code and converts it to the native machine code using the Dart\u2019s VM on the fly. JIT compilation enables important features, like, hot reload/restart/debugging feature that helps us to quickly and efficiently experiment with UIs and bug fixes without losing application state. This compilation process increases the speed and runtime of the application. The JIT compiler also speeds up the Flutter app development process. Ahead-of-Time (AOT) compilation comes into the picture when the flutter app is ready for production. When the app loads on the device the AOT compiles the flutter libraries to native ARM or X64 Machine code. The AOT Compiled app runs the app smoothly, provides better performance, minimum size, and removes dependencies needed for the development environment.","title":"Introduction to Dart"},{"location":"dart/#dart-syntax","text":"\u200b\u200bDart is an open-source, general-purpose, object-oriented programming language with C-style syntax developed by Google in 2011. The purpose of Dart programming is to create a frontend user interface for the web and mobile apps. It is inspired by other programming languages such as Java, JavaScript, C#, and is Strongly Typed. Since Dart is a compiled language so you cannot execute your code directly; instead, the compiler parses it and transfers it into machine code. If you know javascript, dart is very easy to learn. Dart supports most of the common concepts of programming languages like classes, interfaces, and functions. You do not need to know dart in detail to build a flutter app. Actually, you can even pick up dart while learning flutter and you do not have to learn dart before. However, knowledge of the programming language will help you develop apps. Hence, we prepared some examples that may teach you some important charactistics of the dart programming language. Remember that the following list only provides some features of the programming language, there are many many more features which we do not cover.","title":"Dart Syntax"},{"location":"dart/#variables-and-data-types","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 main () { // Variables var dog1 = \"Max\" ; // this is a variable (which can be assigned to values of different data types) bool isDog = true ; dynamic dog1 = \"Max\" ; // this is a variable (which can be assigned to values of different data types - and reassigned with values of different data types) String dog1 = \"Max\" ; // declare a string --> try to always declare the type of your variable int dogAge = 12 ; // integer double dogFoodPrice = 12.99 ; // double // Assigning new values to variables // if you want to assign a new variable, drop the data type and use the same name: var dog1 = \"Max\" ; dog1 = 23 ; // \u274c this is not allowed (once the variable was assigned to a string value, it must remain a string variable) dynamic dog1 = \"Max\" ; dog1 = 23 ; // \u2705 this is allowed as the data type is \"dynamic\" } 1 2 3 4 5 6 7 8 9 main () { // Lists List < String > foodList = [ \"cake\" , \"pizza\" ]; // this is List which can only contain strings List < String ?> foodList = [ \"cake\" , \"pizza\" , null ]; // this is List which can only contain strings and nulls List < int > quanityList = [ 4 , 5 , 4 ]; // this is List which can only contain integers List < double > priceList = [ 4.32 , 5.29 , 4.22 ]; // this is List which can only contain doubles List someList = [ \"cake\" , 3 , 4.32 ] // is the same as List<dynamic> } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 main () { // final and constant variables // 1.) CONSTANT // Value must be known at compile-time. Can't be changed after initialized. const femaleDogs = [ \"Luna\" , \"Bella\" ]; // compile time constant femaleDogs . add ( \"Winona\" ); // \u274c this is not allowed (you cannot change the variable) femaleDogs = [ \"Winona\" ]; // \u274c this is not allowed (you cannot re-assign the variable) // 2.) FINAL // Value must be known at run-time, final birthday = getBirthDateFromDB (); or final maleDogs = [ \"Milo\" ]; // mutable single-assignment variable maleDogs . add ( \"Cooper\" ); // \u2705 this is allowed (you can add an element to the list) maleDogs = [ \"Cooper\" ]; // \u274c this is not allowed (you cannot reassign the variable) }","title":"Variables and Data Types"},{"location":"dart/#maps-jsons","text":"1 2 3 4 5 6 void main () { Map < String , String > foo = Map (); // you can also only write Map foo = {}; foo [ 'First' ] = 'test1' ; foo [ 'Second' ] = 'test2' ; print ( foo ); // = {\"First\": \"test1\", \"Second\": \"test2\"} }","title":"Maps (/jsons)"},{"location":"dart/#null-and-conditions","text":"In Dart, undefined values are null. Expressions in conditionals may only be boolean. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 main () { const int foo1 = 5 ; const int foo2 = 10 ; if ( foo1 > foo2 ) { return 'foo' ; } else { return null ; } // is the same as: (The following expression is often used in Flutter) foo1 > foo2 ? 'foo' : null ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 main () { const bool hasCollar = false ; const String ? toys = null ; const double amountOfMeals = 0 / 0 , // NaN - Not a Number (undefined) const String owner = \"\" , // empty string const int age = 0 , // integer final String ? name ; // nullable String if ( ! hasCollar ) print ( 'bark' ); // bark (means: if not false \u2192 if true) // same as: if ( hasCollar == false ) print ( 'bark' ); if ( ! hasCollar ) { print ( 'bark' );} // bark if ( toys == null ) print ( 'bark' ); // bark (checks if toys is null) if ( amountOfMeals . isNaN ) print ( 'bark' ); // bark if ( owner . isEmpty ) print ( 'bark' ); // bark (the string is empty) if ( age == 0 ) print ( 'bark' ); // bark (checks if age is zero) if ( name == null ) print ( 'bark' ); // bark (checks if breed is null) }","title":"Null and Conditions"},{"location":"dart/#collection-literals","text":"An Array in Javascript is a List in Dart. An Object in Javascript is a Map in Dart. 1 2 3 4 5 6 7 8 9 10 11 12 main () { var dogList = [ \"Lucy\" , \"Cooper\" , \"Zeus\" ]; var dogMap = { 'first' : \"Lucy\" , 'second' : \"Cooper\" }; // could use #first symbol instead var dogSet = { \"Lucy\" , \"Cooper\" , \"Zeus\" }; print ( dogList . length ); // 3 print ( dogMap . length ); // 2 print ( dogSet . length ); // 3 }","title":"Collection literals"},{"location":"dart/#object-oriented-classes","text":"An Array in Javascript is a List in Dart. An Object in Javascript is a Map in Dart. 1 2 3 4 5 6 7 8 9 10 11 12 13 class Dog { // Class \u201cDog\u201d final String name ; // variable name of type String final int phone ; // variable phone of type integer Dog ( this . name , { this . phone }); // example of unnamed and named parameter tag () => \" ${ name } \\n If you found me please call ${ phone } !\" ; } main () { print ( Dog ( 'Luna' , phone: 6198887421 ). tag ()); // Luna // If you found me please call 6198887421! }","title":"Object-oriented Classes"},{"location":"default/","text":"Curriculum For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Curriculum"},{"location":"default/#curriculum","text":"For full documentation visit mkdocs.org .","title":"Curriculum"},{"location":"default/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"default/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"flutter/","text":"Introduction to Flutter Flutter is an open source UI development kit from Google. Flutter can be used to develop cross-platform apps in the Dart programming language. A Flutter program should be able to run on the following target platforms without major adjustments: WebApp, Android, iOS, Windows, Linux, macOS, and Google Fuchsia. Flutter itself is written in C++ and uses the Dart Virtual Machine (Dart VM), as well as the Skia graphics library. Differentiation from other frameworks One of the ways Flutter differs from other frameworks is that it does not use WebView or OEM widgets, which are pre-installed on the end device. When a Native App interacts with the platform to create a widget, it typically accesses the OEM (Original Equipment Manufacturer) widgets on the smartphone or tablet. Flutter eliminates this intermediate step. Instead, the framework uses its own high-performance render engine, Skia, to create the necessary widgets. The open source graphics library for creating 2D graphics connects via interfaces with the respective existing, operating system-dependent, native software development kits. Flutter is executed using ahead-of-time compilers (AOT compilers). Only in the development phase, just-in-time compilers (JIT compilers) are used for faster testing processes. Each app based on Flutter is composed of container, text, image, icon and other widgets, which are individually interpreted and displayed on a canvas element powered by the Skia graphics library. The platform then analyzes the widgets constructed in this way and forwards the events provoked by the end user's interaction to the app. Architecture The framework is essentially constructed from three process units. Source: https://docs.flutter.dev/resources/architectural-overview Embedder At the lowest level and at the heart of the engine, platform-specific embedders are defined. Their job is to connect the rendering with the native screen information, input events, etc. For this purpose, the embedders interact with the engine layer via simple C/C++ APIs. However, these APIs are only mapped internally. This layer is composed of a shell, a human-machine interface, that hosts Dart's virtual machine (DartVM). This shell is platform-specific and provides access to the associated native APIs. They implement OS-specific code, such as communication with the app's Input Method Editor (IME) and lifecycle events. The actual architecture, however, consists of two elements: the engine and the framework. Engine Flutter's middle layer, written in C/C++, contains a variety of components that are crucial to the functionality of the framework and its basic operation. These include the Skia graphics engine and shells, which are accessed through APIs represented by the dart:ul library. Using the defined classes in this library, such as Canvas, Paint and TextBox, it is possible to visually design an app. Framework This is the most important layer that hosts all the libraries and packages necessary to develop an app. The framework is the component that is programmed in Dart and which you need to know. In this section, the operations for creating widgets, for instance, are located. You, as a developer, do not need to know much about the embedder and engine unit. To develop fast and beautiful apps, you only need to know the framework. In the FLutter framework, everything is a widget. A widget is a basic component in a Futter app, which in turn can itself consist of other widgets. A widget bundles logic, interaction, and presentation within an object.There are a number of pre-built widgets that map familiar and often needed interactions, such as buttons, lists, checkboxes, tabs, and so on. Flutter does not use the widgets of the respective platform, but implements them itself. Before we dive deeper into the flutter framework and its syntax, let us consider the programming language dart and its syntax. Flutter Syntax As soon as you create a new flutter project, the flutter \u201cHello-world\u201d project will be displayed. The Flutter hello-world project is a very simple counter app. You can press a button to increase the counter and the current count is displayed in the middle of the screen. We added the source code and our own comments to the guide to help you understand the minimum-viable app source code. Please read the comments carefully. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 // import flutter component import 'package:flutter/material.dart' ; // when run code, trigger the function main() // main runs the widget \u201cMyApp\u201d void main () => runApp ( MyApp ()); // 1. Widget is stateless (can only have one state, cannot change state) class MyApp extends StatelessWidget { // Widget contains \"build()\" method @override Widget build ( BuildContext context ) { // the build method returns the widget MaterialApp // MaterialApp is only used once in a flutter application // you should always add this widget at the beginning of the application // as it provides many useful features, such as theming return MaterialApp ( // title of the app title: 'Flutter Demo' , // do not show a debug banner debugShowCheckedModeBanner: false , // defining the color of the theme theme: ThemeData ( primarySwatch: Colors . blue , ), // the widget MaterialApp contains the app \u201cMyHomePage\u201d home: const MyHomePage (), ); } } // 2. Widget is stateful (it can have multiple states) class MyHomePage extends StatefulWidget { // this is the constructor // you can provide a key to the MyHomePage widget if you use this widget multiple // times across your app. If you do that, the framework knows, that it is // the same widget and has not to create a new \u201cMyHomePage\u201d-Widget // however, you do not need to provide a key. const MyHomePage ({ // type \u201cKey\u201d. The \u201c?\u201d indicates that it is nullable Key ? Key , // this is the super constructor. If a key is provided to the widget, the // the super constructor will transfer the key to the widget \u201cStateful\u201d }) : super ( key: key ); // we override the state of the widget \u201cStateFulWidget\u201d // we create an own state for our stateful widget \u201cMyHomePage\u201d @override _MyHomePageState createState () => _MyHomePageState (); } // this part of the widget describes the state of the widget class _MyHomePageState extends State < MyHomePage > { // initially, the variable \u201c_counter\u201d is 0. int _counter = 0 ; // this is a method that does not return anything (=void) void _incrementCounter () { // when the method is called: we tell the widget to update the state setState (() { // the variable _counter is increased by one _counter = _counter + 1 ; }); } @override Widget build ( BuildContext context ) { // this build method returns the \u201cScaffold\u201d widget // the scaffold widget should only be used once per page return Scaffold ( // it provides a scaffold, in which we can easily add an Appbar appBar: AppBar ( title: const Text ( 'Flutter Demo Home Page' ), ), // the center widget body: Center ( // contains a column. A column can have multiple widgets below each other child: Column ( // we want to have the text widgets within the column widget // centered horizontally mainAxisAlignment: MainAxisAlignment . center , children: [ // displaying a text widget const Text ( 'You have pushed the button this many times:' , ), // displaying another text widget Text ( // this is the variable as string ' $ _counter ' , // we can define a style here. This uses the default text theme of headline 6 style: Theme . of ( context ). textTheme . headline4 , ), ], ), ), // the scaffold widget can (!) also have a floating action button floatingActionButton: FloatingActionButton ( // when the button is pressed, the method _incrementCounter is triggered onPressed: _incrementCounter , // the button contains an icon with the iconData \u201cIcon.add\u201d child: const Icon ( Icons . add ), ), ); } }","title":"Introduction to Flutter"},{"location":"flutter/#introduction-to-flutter","text":"Flutter is an open source UI development kit from Google. Flutter can be used to develop cross-platform apps in the Dart programming language. A Flutter program should be able to run on the following target platforms without major adjustments: WebApp, Android, iOS, Windows, Linux, macOS, and Google Fuchsia. Flutter itself is written in C++ and uses the Dart Virtual Machine (Dart VM), as well as the Skia graphics library.","title":"Introduction to Flutter"},{"location":"flutter/#differentiation-from-other-frameworks","text":"One of the ways Flutter differs from other frameworks is that it does not use WebView or OEM widgets, which are pre-installed on the end device. When a Native App interacts with the platform to create a widget, it typically accesses the OEM (Original Equipment Manufacturer) widgets on the smartphone or tablet. Flutter eliminates this intermediate step. Instead, the framework uses its own high-performance render engine, Skia, to create the necessary widgets. The open source graphics library for creating 2D graphics connects via interfaces with the respective existing, operating system-dependent, native software development kits. Flutter is executed using ahead-of-time compilers (AOT compilers). Only in the development phase, just-in-time compilers (JIT compilers) are used for faster testing processes. Each app based on Flutter is composed of container, text, image, icon and other widgets, which are individually interpreted and displayed on a canvas element powered by the Skia graphics library. The platform then analyzes the widgets constructed in this way and forwards the events provoked by the end user's interaction to the app.","title":"Differentiation from other frameworks"},{"location":"flutter/#architecture","text":"The framework is essentially constructed from three process units. Source: https://docs.flutter.dev/resources/architectural-overview","title":"Architecture"},{"location":"flutter/#embedder","text":"At the lowest level and at the heart of the engine, platform-specific embedders are defined. Their job is to connect the rendering with the native screen information, input events, etc. For this purpose, the embedders interact with the engine layer via simple C/C++ APIs. However, these APIs are only mapped internally. This layer is composed of a shell, a human-machine interface, that hosts Dart's virtual machine (DartVM). This shell is platform-specific and provides access to the associated native APIs. They implement OS-specific code, such as communication with the app's Input Method Editor (IME) and lifecycle events. The actual architecture, however, consists of two elements: the engine and the framework.","title":"Embedder"},{"location":"flutter/#engine","text":"Flutter's middle layer, written in C/C++, contains a variety of components that are crucial to the functionality of the framework and its basic operation. These include the Skia graphics engine and shells, which are accessed through APIs represented by the dart:ul library. Using the defined classes in this library, such as Canvas, Paint and TextBox, it is possible to visually design an app.","title":"Engine"},{"location":"flutter/#framework","text":"This is the most important layer that hosts all the libraries and packages necessary to develop an app. The framework is the component that is programmed in Dart and which you need to know. In this section, the operations for creating widgets, for instance, are located. You, as a developer, do not need to know much about the embedder and engine unit. To develop fast and beautiful apps, you only need to know the framework. In the FLutter framework, everything is a widget. A widget is a basic component in a Futter app, which in turn can itself consist of other widgets. A widget bundles logic, interaction, and presentation within an object.There are a number of pre-built widgets that map familiar and often needed interactions, such as buttons, lists, checkboxes, tabs, and so on. Flutter does not use the widgets of the respective platform, but implements them itself. Before we dive deeper into the flutter framework and its syntax, let us consider the programming language dart and its syntax.","title":"Framework"},{"location":"flutter/#flutter-syntax","text":"As soon as you create a new flutter project, the flutter \u201cHello-world\u201d project will be displayed. The Flutter hello-world project is a very simple counter app. You can press a button to increase the counter and the current count is displayed in the middle of the screen. We added the source code and our own comments to the guide to help you understand the minimum-viable app source code. Please read the comments carefully. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 // import flutter component import 'package:flutter/material.dart' ; // when run code, trigger the function main() // main runs the widget \u201cMyApp\u201d void main () => runApp ( MyApp ()); // 1. Widget is stateless (can only have one state, cannot change state) class MyApp extends StatelessWidget { // Widget contains \"build()\" method @override Widget build ( BuildContext context ) { // the build method returns the widget MaterialApp // MaterialApp is only used once in a flutter application // you should always add this widget at the beginning of the application // as it provides many useful features, such as theming return MaterialApp ( // title of the app title: 'Flutter Demo' , // do not show a debug banner debugShowCheckedModeBanner: false , // defining the color of the theme theme: ThemeData ( primarySwatch: Colors . blue , ), // the widget MaterialApp contains the app \u201cMyHomePage\u201d home: const MyHomePage (), ); } } // 2. Widget is stateful (it can have multiple states) class MyHomePage extends StatefulWidget { // this is the constructor // you can provide a key to the MyHomePage widget if you use this widget multiple // times across your app. If you do that, the framework knows, that it is // the same widget and has not to create a new \u201cMyHomePage\u201d-Widget // however, you do not need to provide a key. const MyHomePage ({ // type \u201cKey\u201d. The \u201c?\u201d indicates that it is nullable Key ? Key , // this is the super constructor. If a key is provided to the widget, the // the super constructor will transfer the key to the widget \u201cStateful\u201d }) : super ( key: key ); // we override the state of the widget \u201cStateFulWidget\u201d // we create an own state for our stateful widget \u201cMyHomePage\u201d @override _MyHomePageState createState () => _MyHomePageState (); } // this part of the widget describes the state of the widget class _MyHomePageState extends State < MyHomePage > { // initially, the variable \u201c_counter\u201d is 0. int _counter = 0 ; // this is a method that does not return anything (=void) void _incrementCounter () { // when the method is called: we tell the widget to update the state setState (() { // the variable _counter is increased by one _counter = _counter + 1 ; }); } @override Widget build ( BuildContext context ) { // this build method returns the \u201cScaffold\u201d widget // the scaffold widget should only be used once per page return Scaffold ( // it provides a scaffold, in which we can easily add an Appbar appBar: AppBar ( title: const Text ( 'Flutter Demo Home Page' ), ), // the center widget body: Center ( // contains a column. A column can have multiple widgets below each other child: Column ( // we want to have the text widgets within the column widget // centered horizontally mainAxisAlignment: MainAxisAlignment . center , children: [ // displaying a text widget const Text ( 'You have pushed the button this many times:' , ), // displaying another text widget Text ( // this is the variable as string ' $ _counter ' , // we can define a style here. This uses the default text theme of headline 6 style: Theme . of ( context ). textTheme . headline4 , ), ], ), ), // the scaffold widget can (!) also have a floating action button floatingActionButton: FloatingActionButton ( // when the button is pressed, the method _incrementCounter is triggered onPressed: _incrementCounter , // the button contains an icon with the iconData \u201cIcon.add\u201d child: const Icon ( Icons . add ), ), ); } }","title":"Flutter Syntax"},{"location":"git/","text":"Introduction to git By far the most widely used modern version control system in the world today is Git. git commands Getting started: Create a new repo on GitHub/ Bitbucket/ GitLab/ ... Initizalize your project git init Connect to your repo git remote add origin git@github.com:SKnoedler/test Authenticate (https or ssh) Example with ssh on a mac: mkdir -p ~/.ssh ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts ssh-keygen -t rsa -C \"user.email\" open the public key with this command $ cat ~/.ssh/id_rsa.pub and copy it. Add the id_rsa.pub key to SSH keys list on your GitHub profile. Push your code git add . && git push --set-upstream origin main create a new branch git checkout -b new-branch Switch to an existing branch git fetch && git checkout new-branch-1 && git pull The git fetch command downloads commits, files, and references from a remote repository to your local repository. The git checkout command switches to the sepciefied branch The git pull command is used to download content from a remote repository and immediately update the local repository to match the content.","title":"Introduction to git"},{"location":"git/#introduction-to-git","text":"By far the most widely used modern version control system in the world today is Git.","title":"Introduction to git"},{"location":"git/#git-commands","text":"","title":"git commands"},{"location":"git/#getting-started","text":"Create a new repo on GitHub/ Bitbucket/ GitLab/ ... Initizalize your project git init Connect to your repo git remote add origin git@github.com:SKnoedler/test Authenticate (https or ssh) Example with ssh on a mac: mkdir -p ~/.ssh ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts ssh-keygen -t rsa -C \"user.email\" open the public key with this command $ cat ~/.ssh/id_rsa.pub and copy it. Add the id_rsa.pub key to SSH keys list on your GitHub profile. Push your code git add . && git push --set-upstream origin main create a new branch git checkout -b new-branch Switch to an existing branch git fetch && git checkout new-branch-1 && git pull The git fetch command downloads commits, files, and references from a remote repository to your local repository. The git checkout command switches to the sepciefied branch The git pull command is used to download content from a remote repository and immediately update the local repository to match the content.","title":"Getting started:"},{"location":"project/","text":"Project As part of the project you will work on your own app. The idea is to build an app for Tech-Academy participants. The app provides space for tech-academy related notes and offers easy and fast access to certain pages of the Tech-Academy website. To complete this course, you are asked to meet the defined requirements. The following requirement section is divided in two parts. First, the project user-stories are presented. In software development, a user story is an informal description of features of a software product. This type of feature description is commonly used in the industry. The user stories have one or multiple acceptance criteria attached. Second, the technical requirements are listed. To complete the project and pass this track, you are asked to fulfill all acceptance criteria as well as to meet all technical requirements. Requirements As a TechAcademy participant, I want to manage my own TechAcademy tasks in a Flutter app. To do that, I need six features. 1. Display notes (page 1) As a TechAcademy participant, I want to see all my previously written notes on a page. If I have saved my name on the profile page previously, I want to be welcomed by the app. Acceptance Criteria: All notes which have been added before, are visible. If no note has been saved so far, the text \"No note available\" is visible. If the user has added a name, the name is visible above the notes. 2. Adding Notes (page 2) As a TechAcademy participant, I want to have a page, on which I can submit a note title and note body text. As soon as the note is submitted, I want to see the saved note on page 1. Acceptance Criteria: A form field for the title is available A form field for the body text is available A save button is available When the button is clicked, the added text will be saved locally 3. Show Webview1 (page 3) As a TechAcademy participant, I want to have a page on which the website https://www.tech-academy.io/team/ is visible. The website should load as soon as I visit the page. Acceptance Criteria: When the page opens, the website https://www.tech-academy.io/team/ loads directly I can navigate on the website 4. Show Webview2 (page 4) As a TechAcademy participant, I want to have a page on which the website https://www.tech-academy.io/login/ is visible. The website should load as soon as I visit the page. Acceptance Criteria: When the page opens, the website https://www.tech-academy.io/login/ loads directly I can navigate on the website 5. Update first- and last name (page 5) As a TechAcademy participant, I want to have a page, on which I can update my first- and last name. Both items should have an individual text field. The first and last name should only be updatable if both text fields have at least two characters entered. Only letters should be allowed to enter. As soon as the names are saved, I want to see the text \u201cHello\u201d, followed by the recently saved first- and last name above my previously saved notes. Acceptance Criteria: A form field for the first name is available A form field for the second name is available A save button is available When the button is clicked, the first name and last name will be saved locally When a name is saved, the saved name is visible above my notes 6. Having a Bottom-Navigation-bar As a TechAcademy participant, I want to always have a bottom navigation bar visible. The navigation bar should have 5 buttons. Each button should take me to one of the pages. Acceptance Criteria: The Bottom navigation bar is always visible The Bottom navigation bar has 5 buttons When a button is pressed, the attached page is opened","title":"Project"},{"location":"project/#project","text":"As part of the project you will work on your own app. The idea is to build an app for Tech-Academy participants. The app provides space for tech-academy related notes and offers easy and fast access to certain pages of the Tech-Academy website. To complete this course, you are asked to meet the defined requirements. The following requirement section is divided in two parts. First, the project user-stories are presented. In software development, a user story is an informal description of features of a software product. This type of feature description is commonly used in the industry. The user stories have one or multiple acceptance criteria attached. Second, the technical requirements are listed. To complete the project and pass this track, you are asked to fulfill all acceptance criteria as well as to meet all technical requirements.","title":"Project"},{"location":"project/#requirements","text":"As a TechAcademy participant, I want to manage my own TechAcademy tasks in a Flutter app. To do that, I need six features.","title":"Requirements"},{"location":"project/#1-display-notes-page-1","text":"As a TechAcademy participant, I want to see all my previously written notes on a page. If I have saved my name on the profile page previously, I want to be welcomed by the app.","title":"1. Display notes (page 1)"},{"location":"project/#acceptance-criteria","text":"All notes which have been added before, are visible. If no note has been saved so far, the text \"No note available\" is visible. If the user has added a name, the name is visible above the notes.","title":"Acceptance Criteria:"},{"location":"project/#2-adding-notes-page-2","text":"As a TechAcademy participant, I want to have a page, on which I can submit a note title and note body text. As soon as the note is submitted, I want to see the saved note on page 1.","title":"2. Adding Notes (page 2)"},{"location":"project/#acceptance-criteria_1","text":"A form field for the title is available A form field for the body text is available A save button is available When the button is clicked, the added text will be saved locally","title":"Acceptance Criteria:"},{"location":"project/#3-show-webview1-page-3","text":"As a TechAcademy participant, I want to have a page on which the website https://www.tech-academy.io/team/ is visible. The website should load as soon as I visit the page.","title":"3. Show Webview1 (page 3)"},{"location":"project/#acceptance-criteria_2","text":"When the page opens, the website https://www.tech-academy.io/team/ loads directly I can navigate on the website","title":"Acceptance Criteria:"},{"location":"project/#4-show-webview2-page-4","text":"As a TechAcademy participant, I want to have a page on which the website https://www.tech-academy.io/login/ is visible. The website should load as soon as I visit the page.","title":"4. Show Webview2 (page 4)"},{"location":"project/#acceptance-criteria_3","text":"When the page opens, the website https://www.tech-academy.io/login/ loads directly I can navigate on the website","title":"Acceptance Criteria:"},{"location":"project/#5-update-first-and-last-name-page-5","text":"As a TechAcademy participant, I want to have a page, on which I can update my first- and last name. Both items should have an individual text field. The first and last name should only be updatable if both text fields have at least two characters entered. Only letters should be allowed to enter. As soon as the names are saved, I want to see the text \u201cHello\u201d, followed by the recently saved first- and last name above my previously saved notes.","title":"5. Update first- and last name (page 5)"},{"location":"project/#acceptance-criteria_4","text":"A form field for the first name is available A form field for the second name is available A save button is available When the button is clicked, the first name and last name will be saved locally When a name is saved, the saved name is visible above my notes","title":"Acceptance Criteria:"},{"location":"project/#6-having-a-bottom-navigation-bar","text":"As a TechAcademy participant, I want to always have a bottom navigation bar visible. The navigation bar should have 5 buttons. Each button should take me to one of the pages.","title":"6. Having a Bottom-Navigation-bar"},{"location":"project/#acceptance-criteria_5","text":"The Bottom navigation bar is always visible The Bottom navigation bar has 5 buttons When a button is pressed, the attached page is opened","title":"Acceptance Criteria:"}]}